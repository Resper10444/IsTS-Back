// import express from 'express';
// import cors from 'cors';
// import mongoose from 'mongoose';
// import jwt from 'jsonwebtoken';
// import dotenv from 'dotenv';
// import User from './model/User.js'; // แก้ไขพาธ
// import { protect, authorizeHeadAdmin } from './auth/middleware.js'; // คง middleware ไว้เผื่อใช้

// dotenv.config();

// const app = express();
// app.use(cors());
// app.use(express.json());

// const port = 5000;

// // ฟังก์ชันสร้าง JWT Token
// const generateToken = (userId) => {
//   return jwt.sign({ id: userId }, process.env.JWT_SECRET, {
//     expiresIn: process.env.JWT_EXPIRES_IN,
//   });
// };

// // Route สำหรับการลงทะเบียน (Register)
// app.post('/register', async (req, res) => {
//   try {
//     const body = req.body;

//     // ตรวจสอบว่าฟิลด์ที่จำเป็นครบหรือไม่ (ลบ role ออกจากการตรวจสอบ)
//     if (
//       !body.firstName ||
//       !body.lastName ||
//       !body.employeeId ||
//       !body.department ||
//       !body.position ||
//       !body.email ||
//       !body.password ||
//       !body.confirmPassword ||
//       !body.phoneNumber
//     ) {
//       return res.status(400).json({
//         message: 'All fields are required',
//       });
//     }

//     const user = await User.create({
//       firstName: body.firstName,
//       lastName: body.lastName,
//       employeeId: body.employeeId,
//       department: body.department,
//       position: body.position,
//       email: body.email,
//       password: body.password,
//       confirmPassword: body.confirmPassword,
//       phoneNumber: body.phoneNumber,
//       // ไม่ต้องระบุ role เพราะ default จะเป็น "User"
//     });

//     const token = generateToken(user._id);

//     const userResponse = {
//       id: user._id,
//       firstName: user.firstName,
//       lastName: user.lastName,
//       employeeId: user.employeeId,
//       department: user.department,
//       position: user.position,
//       email: user.email,
//       phoneNumber: user.phoneNumber,
//       role: user.role, // คงไว้ใน response เพื่อแสดงว่าเป็น "User"
//       createdAt: user.createdAt,
//     };

//     return res.status(201).json({
//       message: 'Register Success',
//       data: userResponse,
//       token: token,
//     });
//   } catch (error) {
//     if (error.name === 'MongoServerError' && error.code === 11000) {
//       return res.status(400).json({
//         message: 'Email or Employee ID already exists',
//       });
//     } else if (error.name === 'ValidationError') {
//       return res.status(400).json({
//         message: error.message,
//       });
//     }

//     return res.status(500).json({
//       message: 'Internal Server Error',
//       error: error.message,
//     });
//   }
// });

// // Route สำหรับการล็อกอิน (Login)
// app.post('/login', async (req, res) => {
//   try {
//     const { employeeId, password } = req.body;

//     if (!employeeId || !password) {
//       return res.status(400).json({
//         message: 'Employee ID and password are required',
//       });
//     }

//     const user = await User.findOne({ employeeId }).select('+password');

//     if (!user) {
//       return res.status(401).json({
//         message: 'Invalid employeeId or password',
//       });
//     }

//     const isMatch = await user.matchPassword(password);

//     if (!isMatch) {
//       return res.status(401).json({
//         message: 'Invalid employeeId or password',
//       });
//     }

//     const token = generateToken(user._id);

//     const userResponse = {
//       id: user._id,
//       firstName: user.firstName,
//       lastName: user.lastName,
//       employeeId: user.employeeId,
//       department: user.department,
//       position: user.position,
//       email: user.email,
//       phoneNumber: user.phoneNumber,
//       role: user.role, // คงไว้ใน response
//       createdAt: user.createdAt,
//     };

//     return res.status(200).json({
//       message: 'Login Success',
//       success: true,
//       data: userResponse,
//       token: token,
//     });
//   } catch (error) {
//     return res.status(500).json({
//       message: 'Internal Server Error',
//       error: error.message,
//     });
//   }
// });

// // Route สำหรับอัปเดตบทบาท (เฉพาะ HeadAdmin) - คงไว้เผื่อใช้ในอนาคต
// app.put('/users/:id/role', protect, authorizeHeadAdmin, async (req, res) => {
//   try {
//     const userId = req.params.id;
//     const { role } = req.body;

//     if (!['HeadAdmin', 'Admin', 'User'].includes(role)) {
//       return res.status(400).json({
//         message: 'Invalid role. Role must be HeadAdmin, Admin, or User',
//       });
//     }

//     const targetUser = await User.findById(userId);
//     if (!targetUser) {
//       return res.status(404).json({
//         message: 'User not found',
//       });
//     }

//     if (targetUser.role === 'HeadAdmin') {
//       return res.status(403).json({
//         message: 'Cannot update the role of a HeadAdmin',
//       });
//     }

//     const updatedUser = await User.findByIdAndUpdate(
//       userId,
//       { role: role },
//       { new: true, runValidators: true }
//     );

//     const userResponse = {
//       id: updatedUser._id,
//       firstName: updatedUser.firstName,
//       lastName: updatedUser.lastName,
//       employeeId: updatedUser.employeeId,
//       department: updatedUser.department,
//       position: updatedUser.position,
//       email: updatedUser.email,
//       phoneNumber: updatedUser.phoneNumber,
//       role: updatedUser.role,
//       createdAt: updatedUser.createdAt,
//     };

//     return res.status(200).json({
//       message: 'User role updated successfully',
//       data: userResponse,
//     });
//   } catch (error) {
//     return res.status(500).json({
//       message: 'Internal Server Error',
//       error: error.message,
//     });
//   }
// });

// // Route สำหรับทดสอบ
// app.get('/api-test', (req, res) => {
//   res.send('Hello World2');
// });

// // เชื่อมต่อ MongoDB
// mongoose.connect(process.env.MONGO_URI)
//   .then(() => console.log('MongoDB Connected'))
//   .catch(err => console.log('MongoDB Connection Error:', err));

// console.log('Mongo URI:', process.env.MONGO_URI);

// app.listen(port, () => {
//   console.log(`Server is running on port ${port}`);
// });
